/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import { Dispatch, SetStateAction, useRef, useState } from "react";
import { Html, useGLTF } from "@react-three/drei";
import { Group } from "three";
import { useFrame } from "@react-three/fiber";
import { GLTFResult } from "./modelTypes";

type pcStatus = {
  open: boolean;
  openMove: Dispatch<SetStateAction<boolean>>;
  url?: string;
};

export default function NativeLaptop({ open, openMove, url }: pcStatus) {
  const group = useRef<Group>(null);
  const topPart = useRef<Group>(null);
  const { nodes, materials } = useGLTF("/macbook.gltf") as GLTFResult;

  //PC開閉処理
  const { setMoveActive } = useLaptopOpen(topPart, open);

  return (
    <group
      ref={group}
      dispose={null}
      onClick={(current) => {
        current.stopPropagation();
        openMove((currentVal) => !currentVal);
        setMoveActive((currentVal) => !currentVal);
      }}
    >
      <group position={[0, 0.52, 0]} scale={[0.1, 0.1, 0.1]}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Circle001.geometry}
          material={nodes.Circle001.material}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Circle001_1.geometry}
          material={nodes.Circle001_1.material}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Circle001_2.geometry}
          material={materials.HeadPhoneHole}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Circle001_3.geometry}
          material={nodes.Circle001_3.material}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Circle001_4.geometry}
          material={nodes.Circle001_4.material}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Circle001_5.geometry}
          material={materials.TouchbarBorder}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Circle001_6.geometry}
          material={materials.Keyboard}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.FrontCameraRing001.geometry}
          material={materials["CameraRIngBlack.002"]}
          position={[-0.15, 19.57, -16.15]}
          scale={5.8}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.KeyboardKeyHole.geometry}
          material={nodes.KeyboardKeyHole.material}
          position={[-11.79, -0.15, -8.3]}
          scale={5.8}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.RubberFoot.geometry}
          material={materials.DarkRubber}
          position={[-11.95, -0.75, 7.86]}
          scale={5.8}
        />
        <group position={[0.01, -0.21, -10.56]} scale={5.8}>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Circle012.geometry}
            material={materials.HingeBlack}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Circle012_1.geometry}
            material={materials.HingeMetal}
          />
        </group>
        <group position={[0, -0.51, 0]} scale={5.8}>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Circle006.geometry}
            material={nodes.Circle006.material}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Circle006_1.geometry}
            material={nodes.Circle006_1.material}
          />
        </group>
        <group position={[-11.79, -0.15, -8.3]} scale={5.8}>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Circle.geometry}
            material={nodes.Circle.material}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Circle_1.geometry}
            material={materials.Key}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Circle_2.geometry}
            material={materials.Touchbar}
          />
        </group>
        {/* モニター部分 */}
        <group
          position={[0.01, -0.47, -10.41]}
          rotation={[Math.PI / 2.5, 0, 0]}
          scale={5.8}
          ref={topPart}
        >
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Circle002.geometry}
            material={nodes.Circle002.material}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Circle002_1.geometry}
            material={materials.Screen}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Circle002_2.geometry}
            material={materials.ScreenGlass}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Circle002_3.geometry}
            material={materials.Rubber}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Circle002_4.geometry}
            material={materials.DisplayGlass}
          />
          <mesh
            receiveShadow
            geometry={nodes.AppleLogo000.geometry}
            material={materials["AppleLogo.004"]}
            position={[0, -0.21, -1.8]}
            rotation={[-Math.PI, 0, -Math.PI]}
            scale={[0.58, 0.58, 0.58]}
          />
          <Html
            wrapperClass="laptop-monitor"
            transform
            distanceFactor={1.97}
            position={[0, -0.01, -1.85]}
            rotation-x={-Math.PI / 2}
            occlude={true}
          >
            <iframe src={url} />
          </Html>
          <rectAreaLight
            width={2.5}
            height={1.65}
            intensity={15}
            color={"#ffffff"}
            rotation={[-0.1, Math.PI, 0]}
            position={[0, 0, 0]}
          />
        </group>
        <group position={[12.2, 0.03, 0.6]} scale={5.8}>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Circle003.geometry}
            material={nodes.Circle003.material}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Circle003_1.geometry}
            material={nodes.Circle003_1.material}
          />
        </group>
        <group position={[-15.03, 0.03, 0.6]} scale={5.8}>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Circle009.geometry}
            material={nodes.Circle009.material}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Circle009_1.geometry}
            material={nodes.Circle009_1.material}
          />
        </group>
      </group>
    </group>
  );
}

useGLTF.preload("/macbook.gltf");

//PCの開閉処理
function useLaptopOpen(topPart: React.RefObject<Group>, open: boolean) {
  const [moveActive, setMoveActive] = useState(false);

  useFrame((_state, delta) => {
    const currentX = topPart?.current?.rotation.x || 0;

    //アクションがなければ終了
    if (!moveActive) {
      return;
    }
    //PCを開閉する
    if (open && Math.PI - currentX > delta) {
      topPart?.current?.rotateX(Math.abs(Math.PI - currentX) / 10);
      return;
    } else if (!open && currentX > Math.PI / 2.5) {
      topPart?.current?.rotateX(-delta * 5);
      return;
      //どちらにも当てはまらなければ終了
    } else {
      setMoveActive(false);
    }
  });

  return {
    moveActive,
    setMoveActive,
  };
}
